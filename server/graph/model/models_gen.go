// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"backend/ent"
	"backend/ent/schema/pulid"
	"time"
)

type Timestamped interface {
	IsTimestamped()
}

type AddCarInput struct {
	Name          string  `json:"name"`
	Description   *string `json:"description"`
	WheelPressure float64 `json:"wheelPressure"`
}

type AddCarPayload struct {
	AddCar []*ent.Car `json:"addCar"`
}

type AddPlaneInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Altitude    float64 `json:"altitude"`
}

type AddPlanePayload struct {
	AddPlane []*ent.Plane `json:"addPlane"`
}

type CarPatch struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

type DeleteCarPayload struct {
	Count int `json:"count"`
}

type DeletePlanePayload struct {
	Count int `json:"count"`
}

type DeleteVehiclePayload struct {
	Count int `json:"count"`
}

type PlanePatch struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

type UpdateCarInput struct {
	Filter *ent.CarWhereInput `json:"filter"`
	Set    *CarPatch          `json:"set"`
}

type UpdateCarPayload struct {
	UpdateCar []*ent.Car `json:"updateCar"`
}

type UpdatePlaneInput struct {
	Filter *ent.PlaneWhereInput `json:"filter"`
	Set    *PlanePatch          `json:"set"`
}

type UpdatePlanePayload struct {
	UpdatePlane []*ent.Plane `json:"updatePlane"`
}

type UpdateVehicleInput struct {
	Filter *VehicleWhereInput `json:"filter"`
	Set    *VehiclePatch      `json:"set"`
}

type UpdateVehiclePayload struct {
	UpdateVehicle []ent.Vehicler `json:"updateVehicle"`
}

type VehiclePatch struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// VehicleWhereInput is used for filtering Car objects.
// Input was generated by ent.
type VehicleWhereInput struct {
	Not *VehicleWhereInput   `json:"not"`
	And []*VehicleWhereInput `json:"and"`
	Or  []*VehicleWhereInput `json:"or"`
	// createdAt field predicates
	Createdat      *time.Time   `json:"createdat"`
	CreatedatNeq   *time.Time   `json:"createdatNEQ"`
	CreatedatIn    []*time.Time `json:"createdatIn"`
	CreatedatNotIn []*time.Time `json:"createdatNotIn"`
	CreatedatGt    *time.Time   `json:"createdatGT"`
	CreatedatGte   *time.Time   `json:"createdatGTE"`
	CreatedatLt    *time.Time   `json:"createdatLT"`
	CreatedatLte   *time.Time   `json:"createdatLTE"`
	// updatedAt field predicates
	Updatedat      *time.Time   `json:"updatedat"`
	UpdatedatNeq   *time.Time   `json:"updatedatNEQ"`
	UpdatedatIn    []*time.Time `json:"updatedatIn"`
	UpdatedatNotIn []*time.Time `json:"updatedatNotIn"`
	UpdatedatGt    *time.Time   `json:"updatedatGT"`
	UpdatedatGte   *time.Time   `json:"updatedatGTE"`
	UpdatedatLt    *time.Time   `json:"updatedatLT"`
	UpdatedatLte   *time.Time   `json:"updatedatLTE"`
	// name field predicates
	Name             *string  `json:"name"`
	NameNeq          *string  `json:"nameNEQ"`
	NameIn           []string `json:"nameIn"`
	NameNotIn        []string `json:"nameNotIn"`
	NameGt           *string  `json:"nameGT"`
	NameGte          *string  `json:"nameGTE"`
	NameLt           *string  `json:"nameLT"`
	NameLte          *string  `json:"nameLTE"`
	NameContains     *string  `json:"nameContains"`
	NameHasPrefix    *string  `json:"nameHasPrefix"`
	NameHasSuffix    *string  `json:"nameHasSuffix"`
	NameEqualFold    *string  `json:"nameEqualFold"`
	NameContainsFold *string  `json:"nameContainsFold"`
	// description field predicates
	Description             *string  `json:"description"`
	DescriptionNeq          *string  `json:"descriptionNEQ"`
	DescriptionIn           []string `json:"descriptionIn"`
	DescriptionNotIn        []string `json:"descriptionNotIn"`
	DescriptionGt           *string  `json:"descriptionGT"`
	DescriptionGte          *string  `json:"descriptionGTE"`
	DescriptionLt           *string  `json:"descriptionLT"`
	DescriptionLte          *string  `json:"descriptionLTE"`
	DescriptionContains     *string  `json:"descriptionContains"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold"`
	// id field predicates
	ID      *pulid.ID  `json:"id"`
	IDNeq   *pulid.ID  `json:"idNEQ"`
	IDIn    []pulid.ID `json:"idIn"`
	IDNotIn []pulid.ID `json:"idNotIn"`
	IDGt    *pulid.ID  `json:"idGT"`
	IDGte   *pulid.ID  `json:"idGTE"`
	IDLt    *pulid.ID  `json:"idLT"`
	IDLte   *pulid.ID  `json:"idLTE"`
}
